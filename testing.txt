RENAMING

1. Configure and run  .\bock-ipfs.exe daemon in kubo-master
2. run rename.js: node rename.js
3. in bash:  -----> for upload
 echo "Hello BOCK IPFS!" > test.txt
ipfs add test.txt
4. Convert cid to v1 verison :
ipfs cid format -v 1 QmRSvse55KUqgegkcpLsiycEjnvx9CiDDExrxxf6LX2QeY
zdj7WYYBF58vnxSZMzgMZJVbMSoN18Prk8M5ZNPdm3m9xbJpU
5. curl http://zdj7WYYBF58vnxSZMzgMZJVbMSoN18Prk8M5ZNPdm3m9xbJpU.bockipfs.localhost:9000/   ---> for retrieval


VALIDATION TEST SCRIPT: BOCK\IPFS-V5\ipfs-kubo\kubo-master
# Clean up any existing test files
rm -f test-*.txt file*.txt
rm -rf test-dir

echo "=== BOCK IPFS Validation Test ==="

echo "1. Testing ADD command..."
echo "Test content for BOCK IPFS" > test-validation.txt
$CID1 = (.\bock-ipfs.exe add test-validation.txt | Select-String "added" | ForEach-Object { ($_ -split " ")[1] })
echo "Added file with CID: $CID1"

echo "2. Testing CAT command..."
.\bock-ipfs.exe cat $CID1

echo "3. Testing FILES WRITE command..."
echo "MFS validation content" | .\bock-ipfs.exe files write --create --parents /validation/test.txt

echo "4. Testing FILES LS command..."
.\bock-ipfs.exe files ls -l /validation

echo "5. Testing FILES READ command..."
.\bock-ipfs.exe files read /validation/test.txt

echo "=== Validation Complete ==="




1. First, test direct IPFS connection:
bash# Check IPFS version
curl -X POST "http://localhost:5001/api/v0/version"

# Create the user directory directly in IPFS
curl -X POST "http://localhost:5001/api/v0/files/mkdir?arg=/users/demo&parents=true"

# List root directory
curl -X POST "http://localhost:5001/api/v0/files/ls?arg=/"
2. Start your API server (port 4000)
Make sure your API server is running with the updated code.
3. Test your API endpoints:
Health Check


bashcurl "http://localhost:4000/health"
Create Folder


bashcurl -X POST "http://localhost:4000/create-folder" \
  -H "Content-Type: application/json" \
  -d '{"folderPath": "documents"}'

curl -X POST "http://localhost:4000/create-folder" \
  -H "Content-Type: application/json" \
  -d '{"folderPath": "images/vacation"}'


List Directory Contents
bash# List root user directory
curl "http://localhost:4000/list"

# List specific subdirectory
curl "http://localhost:4000/list?dir=images"


Upload File

curl -X POST "http://localhost:4000/upload-file" \
  -F "file=@test.txt" \
  -F "filePath=documents/hello.txt"


Read File Content
bashcurl "http://localhost:4000/read-file?filePath=documents/hello.txt"


Get File Info
bashcurl "http://localhost:4000/file-info?filePath=documents/hello.txt"


Rename/Move File
curl -X POST "http://localhost:4000/rename" \
  -H "Content-Type: application/json" \
  -d '{"oldPath": "documents/greeting.txt", "newPath": "documents/welcome.txt"}'

delete
curl -X DELETE "http://localhost:4000/delete" \
  -H "Content-Type: application/json" \
  -d '{"itemPath": "documents/welcome.txt"}'


test sequnece:
# 1. Check health
echo "=== Health Check ==="
curl "http://localhost:4000/health" | jq

# 2. Create folders
echo -e "\n=== Creating Folders ==="
curl -X POST "http://localhost:4000/create-folder" \
  -H "Content-Type: application/json" \
  -d '{"folderPath": "projects/web-app"}' | jq

# 3. List contents
echo -e "\n=== Listing Contents ==="
curl "http://localhost:4000/list" | jq

# 4. Upload file (fixed - escape the exclamation mark or use double quotes)
echo -e "\n=== Uploading File ==="
echo "console.log('Hello IPFS');" > app.js
curl -X POST "http://localhost:4000/upload-file" \
  -F "file=@app.js" \
  -F "filePath=projects/web-app/app.js" | jq

# 5. Read file
echo -e "\n=== Reading File ==="
curl "http://localhost:4000/read-file?filePath=projects/web-app/app.js"

# 6. Get file info
echo -e "\n=== File Info ==="
curl "http://localhost:4000/file-info?filePath=projects/web-app/app.js" | jq

# 7. List the web-app directory to see the uploaded file
echo -e "\n=== Listing Web-App Directory ==="
curl "http://localhost:4000/list?dir=projects/web-app" | jq

# Cleanup
rm -f app.js 2>/dev/null



